{"version":3,"sources":["board_layout.jsx","constants.jsx","pieces.jsx","square.jsx","board.jsx","starting_layouts.jsx","game_control.jsx","game.jsx","serviceWorker.js","index.js"],"names":["BoardLayout","corePieces","topLeftBlack","Array","Error","this","_corePieces","_topLeftBlack","Object","seal","map","row","col","newPiece","undefined","id","nRows","nCols","cp","piece","fill","isBlack","otherRow","tmp","length","itemTypes","CorePiece","name","freeze","CorePieceFactory","_lastUsedId","input","make","Piece","corePiece","gameOptions","useDrag","item","type","collect","monitor","isDragging","end","dragEnd","didDrop","drag","dragBehaviour","move","className","ref","SimpleSquare","props","color","children","React","PureComponent","DroppableSquare","useDrop","accept","drop","movePiece","isOver","style","position","width","height","addHeader","elems","rowName","key","elemName","push","String","fromCharCode","addRow","layout","makeBoarderElem","numberRowsFromTop","makeSquare","index","Board","display","gridTemplateColumns","gridTemplateRows","layouts","standard","copyableTop","board","copyableBottom","displayName","fiveASide","layoutNames","keys","GameControl","currentLayout","boardLayout","onChange","checked","onClick","restart","clear","flip","RowOfPieces","makeBoardState","cpf","makeCorePiece","startingLayouts","pieces","copyablePiecesTop","copyablePiecesBottom","layoutName","Game","_corePieceFactory","state","setState","copy","clearSquares","reserveRows","pieceId","find","p","newBoardLayout","bp","findCorePiecebyId","obp","_findOffBoardPiece","copiedPiece","dropped","onBoard","Boolean","DndProvider","backend","HTML5Backend","renderMainGame","Component","window","location","hostname","match","root","document","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8dbb8de4.chunk.js","sourcesContent":["class BoardLayout {\r\n\r\n    // Input is of form show below.  Each element is CorePiece or null.\r\n    // [\r\n    //     [r0c0, r0c1. ...],\r\n    //     [r1c0, r1c1. ...], \r\n    //     ...\r\n    // ]\r\n    constructor(corePieces, topLeftBlack) {\r\n        if(!(corePieces instanceof Array && typeof topLeftBlack === \"boolean\")) {\r\n            throw new Error(\"Bad input to BoardLayout\");\r\n        }\r\n        this._corePieces = corePieces;\r\n        this._topLeftBlack = topLeftBlack;\r\n        Object.seal(this);\r\n    }\r\n\r\n    copy() {\r\n        return new BoardLayout(\r\n            this._corePieces.map(row => [...row]), \r\n            this._topLeftBlack\r\n        );\r\n    }\r\n\r\n    get nRows() {return this._corePieces.length;}\r\n    get nCols() {return this._corePieces[0].length;}\r\n\r\n    // Get or set the core piece at the specified square. Null represents an emoty square.\r\n    corePiece(row, col, newPiece) {\r\n        if(this._corePieces[row][col] === undefined) {\r\n            throw new Error(`Invalid row or column number: ${row} ${col}`)\r\n        }\r\n\r\n        if(newPiece !== undefined) {\r\n            this._corePieces[row][col] = newPiece; \r\n        }\r\n\r\n        return this._corePieces[row][col];\r\n    }\r\n\r\n    isBlack(row, col) {\r\n        const asTopLeft = (row + col) % 2 === 0;\r\n        return asTopLeft ? this._topLeftBlack : !this._topLeftBlack;\r\n    }\r\n\r\n   findCorePiecebyId(id) {\r\n        for(let row = 0; row < this.nRows; ++row) {\r\n            for(let col = 0; col < this.nCols; ++col) {\r\n                const cp = this._corePieces[row][col];\r\n                if(cp && cp.id === id) {\r\n                    return {row:row, col:col, piece:cp};\r\n                }\r\n            }\r\n        }\r\n    \r\n        return null;\r\n    }\r\n\r\n    clearSquares() {\r\n        for(let row of this._corePieces) {\r\n            row.fill(null);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    reserveRows() {\r\n        this._topLeftBlack = this.isBlack(this.nRows-1, 0);\r\n\r\n        let cp = this._corePieces; \r\n        for(let row = 0; row < this.nRows/2; ++row) {\r\n            const otherRow = this.nRows - (row+1);\r\n            for(let col = 0; col < this.nCols; ++col) {\r\n                const tmp = cp[row][col];\r\n                cp[row][col] = cp[otherRow][col];\r\n                cp[otherRow][col] = tmp;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport {BoardLayout};","const itemTypes = {\r\n    PIECE: 'piece'\r\n};\r\n\r\nexport {itemTypes};","import React from 'react';\r\nimport { useDrag } from 'react-dnd';\r\nimport { itemTypes } from './constants';\r\n\r\n\r\nimport SVGPiece from 'react-chess-pieces';\r\n\r\n\r\nclass CorePiece {\r\n  constructor(name, id) {\r\n    this.id = id;\r\n    this.name = name;\r\n    Object.freeze(this);\r\n  }\r\n}\r\n\r\nclass CorePieceFactory {\r\n\r\n  constructor() {\r\n    this._lastUsedId = 0;\r\n  }\r\n\r\n  // Input can be a piece to copy, the name of a piece or null\r\n  make(input = null) {\r\n\r\n    if (input === null) {\r\n      return null;\r\n    }\r\n\r\n    if(input instanceof CorePiece) {\r\n      return this.make(input.name);\r\n    }\r\n\r\n    ++this._lastUsedId;\r\n\r\n    return new CorePiece(input, this._lastUsedId);\r\n  }\r\n}\r\n\r\nfunction Piece({ corePiece, gameOptions }) {\r\n\r\n  const [{ isDragging }, drag ] = useDrag({\r\n    item: {\r\n      type: itemTypes.PIECE,\r\n      id: corePiece.id,\r\n    },\r\n    collect: monitor => ({\r\n      isDragging: !!monitor.isDragging(),\r\n    }),\r\n    end: (item, monitor) => gameOptions.dragEnd(corePiece.id, monitor.didDrop()),\r\n  });\r\n\r\n  if (isDragging && gameOptions.dragBehaviour(corePiece.id).move) {\r\n    /* Hide the original piece when moving */\r\n    return null;\r\n  }\r\n  else {\r\n    return (\r\n      <div\r\n        className='piece-div'\r\n        ref={drag}\r\n      >\r\n        <SVGPiece piece={corePiece.name} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { Piece, CorePieceFactory } ","import React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport { itemTypes } from './constants';\r\nimport { Piece } from './pieces';\r\n\r\nclass SimpleSquare extends React.PureComponent {\r\n    render() {\r\n        const { color, children } = this.props;\r\n\r\n        let className = 'square';\r\n        if (color) {\r\n            if(color === 'black') {\r\n                className += ' black-square';\r\n            } else if(color === 'white') {\r\n                className += ' white-square';\r\n            } else {\r\n                throw new Error(`Unrecognised square color: ${color}`)\r\n            }\r\n        }\r\n        \r\n        return (\r\n            <div className='square-placeholder'>\r\n                <div className={className}>\r\n                    {children}\r\n                </div>\r\n           </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction DroppableSquare({ corePiece, gameOptions, color, row, col }) {\r\n    const [, drop] = useDrop({\r\n        accept: itemTypes.PIECE,\r\n        drop: item => gameOptions.movePiece(item.id, row, col),\r\n        collect: monitor => ({\r\n            isOver: !!monitor.isOver(),\r\n        }),\r\n    })\r\n    return (\r\n        <div ref={drop}\r\n            style={{\r\n                position: 'relative',\r\n                width: '100%',\r\n                height: '100%',\r\n            }}\r\n        >\r\n            <SimpleSquare color={color}>\r\n                {corePiece ? <Piece corePiece={corePiece} gameOptions={gameOptions} /> : null}\r\n            </SimpleSquare>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport {SimpleSquare, DroppableSquare};","import React from 'react';\r\nimport { DroppableSquare as BoardSquare } from './square';\r\n\r\n\r\nfunction addHeader(nCols, elems, rowName) {\r\n    const key = elemName => rowName + '-' + elemName;\r\n    elems.push(<div key={key('start')} />);\r\n    for (let col = 0; col < nCols; ++col) {\r\n        elems.push(\r\n            <div\r\n                key={key(col)}\r\n                className='board-boarder board-boarder-letter'\r\n            >\r\n                {String.fromCharCode(65+col)}\r\n            </div>\r\n        );\r\n    }\r\n    elems.push(<div key={key('end')} />);\r\n}\r\n\r\nfunction addRow(layout, row, gameOptions, elems) {\r\n\r\n    let key = name =>  'r' + row + '-' + name;\r\n\r\n    let makeBoarderElem = name => (\r\n        <div\r\n            key={key(name)}\r\n            className='board-boarder board-boarder-number'\r\n        >\r\n            {gameOptions.numberRowsFromTop ? row + 1 : layout.nRows - row}\r\n        </div>\r\n    );\r\n\r\n    let makeSquare = col => (\r\n        <BoardSquare\r\n            index={col}\r\n            key={key(col)}\r\n\r\n            corePiece={layout.corePiece(row, col)}\r\n            gameOptions={gameOptions}\r\n\r\n            // This is the 'conceptual' color which must be black or white.\r\n            color={layout.isBlack(row, col) ? 'black' : 'white'}\r\n\r\n            row={row}\r\n            col={col}\r\n        />\r\n    )\r\n\r\n    elems.push(makeBoarderElem('start'));\r\n\r\n    for (let col = 0; col < layout.nCols; ++col) {\r\n        elems.push(makeSquare(col));\r\n    }\r\n\r\n    elems.push(makeBoarderElem('end'));\r\n}\r\n\r\nfunction Board({layout, gameOptions}) {\r\n    const nRows = layout.nRows;\r\n    const nCols = layout.nCols;\r\n\r\n    let elems = [];\r\n\r\n    addHeader(nCols, elems, 'top');\r\n    for (let row = 0; row < nRows; ++row) {\r\n        addRow(layout, row, gameOptions, elems);\r\n    }\r\n    addHeader(nCols, elems, 'bottom');\r\n\r\n    const style = { // For now\r\n        display: 'grid',\r\n        gridTemplateColumns: `repeat(${nCols+2},auto)`,\r\n        gridTemplateRows: `repeat(${nRows+2},auto)`,\r\n    };\r\n\r\n    return (\r\n        <div className=\"board\" style={style}>\r\n            {elems}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport { Board }\r\n","const layouts = {\r\n    standard: {\r\n        copyableTop: ['p', 'n',  'b',  'r',  'q',  'k'],\r\n\r\n        board: [\r\n            ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],\r\n            ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\r\n            ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],\r\n        ],\r\n        topLeftBlack: true,\r\n\r\n        copyableBottom: ['P', 'N',  'B',  'R',  'Q',  'K' ],\r\n\r\n        displayName: 'Standard',\r\n    },\r\n\r\n    fiveASide: {\r\n        copyableTop: ['p', 'n',  'b',  'r',  'q',  'k'],\r\n\r\n        board: [\r\n            ['r', 'n', 'b', 'q', 'k'],\r\n            ['p', 'p', 'p', 'p', 'p'],\r\n            [null, null, null, null, null],\r\n            [null, null, null, null, null],\r\n            ['P', 'P', 'P', 'P', 'P'],\r\n            ['R', 'N', 'B', 'Q', 'K'],\r\n        ],\r\n        topLeftBlack: true,\r\n\r\n        copyableBottom: ['P', 'N',  'B',  'R',  'Q',  'K' ],\r\n\r\n        displayName: '5-a-side',\r\n    },\r\n};\r\n\r\nconst defaultLayoutName = 'standard';\r\n\r\nexport default layouts;\r\nexport {defaultLayoutName};\r\n","import React from 'react';\r\nimport layouts from './starting_layouts';\r\n\r\nconst layoutNames = Object.keys(layouts);\r\n\r\nfunction GameControl({gameOptions}) {\r\n\r\n    const currentLayout = gameOptions.boardLayout();\r\n\r\n    const makeGameTypeItem = name => (\r\n        <label key={name}>\r\n            <input type=\"radio\" name=\"game-type\"\r\n                onChange={() => gameOptions.boardLayout(name)}\r\n                checked={currentLayout === name}\r\n            />\r\n            {layouts[name].displayName}\r\n        </label>\r\n    );\r\n\r\n    return (\r\n        <div className=\"game-control\" >\r\n            <div className=\"game-type\">\r\n                {layoutNames.map(makeGameTypeItem)}\r\n            </div>\r\n\r\n            <div className='buttons'>\r\n                <button type='button' onClick={()=>gameOptions.restart()}>Restart</button>\r\n                <button type='button' onClick={()=>gameOptions.clear()}> Clear</button>\r\n                <button type='button' onClick={()=>gameOptions.flip()}>Flip</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameControl;","// Information about games that is indepantant of rendering */\r\n\r\nimport React from 'react';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\n\r\nimport { BoardLayout } from './board_layout';\r\nimport { Board } from './board';\r\nimport { SimpleSquare } from './square'\r\nimport {  CorePieceFactory, Piece } from './pieces';\r\nimport  GameControl from './game_control';\r\nimport  startingLayouts from './starting_layouts';\r\nimport  {defaultLayoutName} from './starting_layouts';\r\n\r\n\r\nfunction RowOfPieces({ corePieces, gameOptions }) {\r\n    return (\r\n        <div className='row-of-pieces'>\r\n            {corePieces.map(\r\n                (cp, index) => (\r\n                    <SimpleSquare key={index}>\r\n                        <Piece corePiece={cp} gameOptions={gameOptions} />\r\n                    </SimpleSquare>\r\n                )\r\n            )}   \r\n        </div>\r\n    ); \r\n}\r\n\r\nfunction makeBoardState(name, cpf) {\r\n\r\n    const makeCorePiece = name => cpf.make(name);\r\n\r\n    const layout = startingLayouts[name];\r\n    if(!layout) {\r\n        throw new Error(`Unrecognised layout name: ${name}`)\r\n    }\r\n    \r\n    const pieces = layout.board.map(row => row.map(makeCorePiece));\r\n\r\n    return {\r\n        copyablePiecesTop: layout.copyableTop.map(makeCorePiece),\r\n        boardLayout: new BoardLayout(pieces, layout.topLeftBlack),\r\n        copyablePiecesBottom: layout.copyableBottom.map(makeCorePiece),\r\n        layoutName: name,\r\n    };\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        let cpf = new CorePieceFactory();\r\n        this._corePieceFactory = cpf;\r\n\r\n        this.state = makeBoardState(defaultLayoutName, cpf);\r\n        this.state.numberRowsFromTop = false;\r\n    }\r\n\r\n    get numberRowsFromTop() {\r\n        return this.state.numberRowsFromTop;\r\n    }\r\n    boardLayout(layoutName) {\r\n\r\n        if(layoutName !== undefined) {\r\n            this.setState(makeBoardState(layoutName, this._corePieceFactory));\r\n        }\r\n        return this.state.layoutName;\r\n    }\r\n\r\n    clear() {\r\n        this.setState({\r\n            boardLayout: this.state.boardLayout.copy().clearSquares()\r\n        });\r\n    }\r\n\r\n    flip() {\r\n        this.setState({\r\n            boardLayout: this.state.boardLayout.copy().reserveRows(),\r\n            copyablePiecesTop: this.state.copyablePiecesBottom,\r\n            copyablePiecesBottom: this.state.copyablePiecesTop,\r\n            \r\n            numberRowsFromTop: !this.state.numberRowsFromTop,\r\n        });\r\n    }\r\n\r\n    restart() {\r\n        this.setState(makeBoardState(this.state.layoutName, this._corePieceFactory));\r\n    }\r\n\r\n    _findOffBoardPiece(pieceId) {\r\n        let piece = this.state.copyablePiecesTop.find(p => p.id === pieceId);\r\n        if(!piece) {\r\n            piece = this.state.copyablePiecesBottom.find(p => p.id === pieceId);\r\n        }\r\n\r\n        return piece;\r\n    }\r\n\r\n    movePiece(pieceId, row, col)  {\r\n\r\n        let newBoardLayout = this.state.boardLayout.copy();\r\n        const bp = newBoardLayout.findCorePiecebyId(pieceId);\r\n        if ( bp ) {\r\n            if (row !== bp.row || col !== bp.col) {\r\n                newBoardLayout.corePiece(row, col, bp.piece);\r\n                newBoardLayout.corePiece(bp.row, bp.col, null);\r\n            }\r\n        } else {\r\n            let obp = this._findOffBoardPiece(pieceId);\r\n\r\n            if (!obp) {\r\n                throw new Error(`Piece with id ${pieceId} not found`);\r\n            }\r\n\r\n            const copiedPiece = this._corePieceFactory.make(obp); \r\n            newBoardLayout.corePiece(row,col, copiedPiece)\r\n        }\r\n\r\n        this.setState({\r\n            boardLayout: newBoardLayout,\r\n        })\r\n    }\r\n\r\n    dragEnd(pieceId, dropped) {\r\n        if (!dropped) {\r\n            // The piece was dragged off the board. Now clear it.\r\n            const bp = this.state.boardLayout.findCorePiecebyId(pieceId);\r\n            if (bp) {\r\n                let newBoardLayout = this.state.boardLayout.copy();\r\n                newBoardLayout.corePiece(bp.row, bp.col, null);\r\n                \r\n                this.setState({\r\n                    boardLayout: newBoardLayout,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    dragBehaviour(pieceId) {\r\n        const onBoard = Boolean(this.state.boardLayout.findCorePiecebyId(pieceId));\r\n    \r\n        return {\r\n            move: onBoard,\r\n            copy: !onBoard,\r\n        };\r\n    }\r\n\r\n    renderMainGame() {\r\n        return (\r\n            <DndProvider backend={HTML5Backend}>\r\n                <div className=\"game\">\r\n\r\n                    <RowOfPieces\r\n                        corePieces={this.state.copyablePiecesTop}\r\n                        gameOptions={this}\r\n                    />\r\n\r\n                    <Board\r\n                        layout={this.state.boardLayout}\r\n                        gameOptions={this}\r\n                    />\r\n\r\n                    <RowOfPieces\r\n                        corePieces={this.state.copyablePiecesBottom}\r\n                        gameOptions={this}\r\n                    />\r\n                </div>\r\n            </DndProvider>\r\n        )\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n            {this.renderMainGame()}\r\n            <GameControl gameOptions={this}/>\r\n            </>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport { Game }\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Game } from './game';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './main.css';\r\n\r\nconst root = document.getElementById('root');\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Game />\r\n  </React.StrictMode>,\r\n  root\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}